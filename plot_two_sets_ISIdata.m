function plot_two_sets_ISIdata(ISIstruct1, ISIstruct2, plot_difference, numbins)
%------------------------------------------------------------------------------------------
% Plot 2 sets of ISI histograms generated by "isi_partition.m" script.
%
% USAGE:   plot_two_sets_ISIdata(ISIstruct1, ISIstruct2, plot_difference, numbins)
% INPUT:   ISIstruct1          * data struct 1 from "isi_partition.m" output
%          ISIstruct2          * data struct 2 from "isi_partition.m" output
%          plot_difference     * (optional) logical flag to plot difference histogram
%          numbins             * (optional) can specify number of histogram bins; otherwise 
%                                  a default 10*log10(N) bins is used, where N = #data pts
%
% Written by Alex Casti, FDU Department of Mathematics
% Last updated 11 September 2015
%------------------------------------------------------------------------------------------

if nargin < 2
  error('Not enough inputs!');
end
if (nargin < 3) || isempty(plot_difference)
  plot_difference = false;  % do not show difference of histograms on each subplot (default)
end
if nargin == 4
  if ceil(numbins)~=numbins
    error('numbins input must be an integer!');
  end
  if isempty(numbins)
    numbins_specified = false;
  else
    numbins_specified = true;
  end
else
  numbins_specified = false;
end

% First define some variables (many of which are assumed to be common for the two 
%  sets of data (bin widths and so forth will be assumed to be dictated by the 
%  amount of data points associated with ISIstruct1).
B1 = ISIstruct1.B;    % Big data matrices with spike times, intervals in old/new time, etc
B2 = ISIstruct2.B;
Bseg1 = ISIstruct1.Bseg;  % Spike/ISI data partitioned into segments
Bseg2 = ISIstruct2.Bseg;
numspikes_seg = ISIstruct1.numspikes_seg;
numsegx = ISIstruct1.numsegx;
numsegy = ISIstruct1.numsegy;
% Generate error message if a different number of spike time partitions 
%  (in rate vs. d(rate)/dt space) were different for the two sets.  Plotting
%  the data over one another then won't make sense.
if (numsegx ~= ISIstruct2.numsegx) || (numsegy ~= ISIstruct2.numsegy)
  fprintf('Number of spike partitions for data set 1 = %d\n',numsegx*numsegy);
  fprintf('Number of spike partitions for data set 2 = %d\n',ISIstruct2.numsegx*ISIstruct2.numsegy);
  error('Number of spike time partitions was different for the two data sets!');
end

%----------------------------------------------------------------------------------------------
% Plot the interval histograms (new time).  The number of bins used is motivated by a proposal
%  (for exploratory work) mentioned in "Understanding Robust and Exploratory Data Analysis"
%  edited by Hoaglin, Mosteller, and Tukey (p.29).  The "number of events" parameter is set as
%  the mean number of spikes within each segment.
%----------------------------------------------------------------------------------------------

% First check to see if user specified the number of bins for the histograms.  If not, then
%  use the rule from Hoaglin, Mosteller, and Tukey book.
if ~numbins_specified
  numbins = ceil(10*log10(mean(numspikes_seg(:))));
end
% Define a common ISI axis (new time)
minISI = 0;
maxISI = max( max(B1(:,8)) , max(B2(:,8)) ); % Use maximum of all ISI across each data set
edges = linspace(minISI,maxISI,numbins+1); 
dISI = mean(diff(edges));
bincenters = edges(1:end-1)+0.5*dISI;
Nhist1 = cell(numsegx,numsegy);
Nhist2 = cell(numsegx,numsegy);
Nhist_normalized1 = cell(numsegx,numsegy);
Nhist_normalized2 = cell(numsegx,numsegy);
Nhist_normalized_diff = cell(numsegx,numsegy);  % Difference between histograms
minprob = Inf;  % If difference histogram is plotted we need to allow negative probabilities
maxprob = 0;  % Calculate maximum probability in any window for axis scaling
xmin = 0;         % Minimum value on x-axis (ISI) for axis scaling
xmax = maxISI;    % Maximum value on x-axis (ISI) for axis scaling
% Note: Still will generate ISI histogram data even if showplot=false
figure
for i = 1:numsegx
  for j = 1:numsegy
    Nhist_temp1 = histc(Bseg1{i,j}(:,8),edges); Nhist1{i,j} = Nhist_temp1(1:end-1);
    Nhist_temp2 = histc(Bseg2{i,j}(:,8),edges); Nhist2{i,j} = Nhist_temp2(1:end-1);
    %Nhist_normalized1{i,j} = Nhist1{i,j}/sum(Nhist1{i,j});  % Sum of prob is unity (alternate normalization)
    % Normalize each histogram to have unit area 
    Nhist_normalized1{i,j} = (1/dISI)*Nhist1{i,j}/sum(Nhist1{i,j});  % Integral of prob is unity
    Nhist_normalized2{i,j} = (1/dISI)*Nhist2{i,j}/sum(Nhist2{i,j}); 
    Nhist_normalized_diff{i,j} = Nhist_normalized1{i,j} - Nhist_normalized2{i,j};
    max_temp = max( max(Nhist_normalized1{i,j}) , max(Nhist_normalized2{i,j}) );
    minprob = min(minprob,min(Nhist_normalized_diff{i,j}));
    maxprob = max(maxprob,max_temp);
    lw = 2;  % linewidth
    % Order plot so that lower left corner is lowest left box in lam vs dlam plane, etc
    k = i + 2*numsegx - numsegx*(j-1);  % This formula does the trick
      subplot(numsegy,numsegx,k)
        %plot(edges_plot,Nhist_normalized{i,j});
        stairs(bincenters,Nhist_normalized1{i,j},'color','red','linewidth',lw); hold('on');
        stairs(bincenters,Nhist_normalized2{i,j},'color','blue','linewidth',lw);
        if plot_difference
          stairs(bincenters,Nhist_normalized_diff{i,j},'color','green','linewidth',lw);
        end
        if k == 1
          legend('ISI 1','ISI 2');
        end
        title(sprintf('(%d,%d)',i,j),'fontweight','bold');
        axis([xmin xmax 0 1.5]);
        if j == 1
          xlabel('ISI','fontweight','bold');
        end
        if mod(k-1,numsegx)==0
          %ylabel('norm prob(count)','fontweight','bold');
          ylabel('ISI density','fontweight','bold');
        else 
          set(gca,'Yticklabel','');
        end
  end
end

% Give option to re-scale the axes of the figure
fprintf('maxprob = %g\n',maxprob);
rescaleY_answer = input('Re-scale y axes using maxprob?  (0) No  (1) Yes : ');
if rescaleY_answer
  maxprob_plot = maxprob;
  rescale = true;
else  % Give user option to define own y-axis scale maximum
  rescaleY_answer = input('Re-scale the plot axes using your own vertical axis maximum?  (0) No  or Enter Value : ');
  if rescaleY_answer
    rescale = true;
    maxprob_plot = rescaleY_answer;
  else 
    maxprob_plot = [];  % In this case each y-axis is scaled by Matlab automatically and is not defined by user
  end
end
fprintf('Maximum ISI = %g\n',maxISI);
rescaleX_answer = input('Re-scale x axis maximum (max ISI is default)? (0) No  (1) Enter value : ');
% xmin=0 is always assumed (default value is maximum ISI across all histograms)
if rescaleX_answer
  xmax = rescaleX_answer;
  rescale = true;
end
if rescale   % Either x-axis or y=axis re-scale option was chosen
  for i =1:numsegx
    for j = 1:numsegy
       k = i + 2*numsegx - numsegx*(j-1);
       subplot(numsegy,numsegx,k)
       if plot_difference
         axis([xmin xmax minprob maxprob_plot]);
       else
         axis([xmin xmax 0 maxprob_plot]); 
       end
    end
  end
end

